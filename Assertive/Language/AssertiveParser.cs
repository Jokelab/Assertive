//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/dev/private/Assertive/Assertive/Language/AssertiveParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AssertiveParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		VAR=1, INT=2, BOOL=3, IF=4, ELSE=5, WHILE=6, LOOP=7, FROM=8, TO=9, PARALLEL=10, 
		EACH=11, IN=12, ASSERT=13, COLON=14, SEMICOLON=15, EQUALS=16, NOTEQUALS=17, 
		AND=18, OR=19, NOT=20, LESSOREQUALTHAN=21, MOREOREQUALTHAN=22, LESSTHAN=23, 
		MORETHAN=24, PLUS=25, MINUS=26, MULTIPLY=27, DIVIDE=28, LPAREN=29, RPAREN=30, 
		DOUBLELBRACE=31, DOUBLERBRACE=32, LBRACE=33, RBRACE=34, LBRACK=35, RBRACK=36, 
		COMMA=37, HOST_SECTION=38, PATH_SECTION=39, QUERY_SECTION=40, HEADER_SECTION=41, 
		BODY_SECTION=42, DEF=43, RETURN=44, BREAK=45, CONTINUE=46, IMPORT=47, 
		OUT=48, STRING=49, FORMURLENCODED=50, FORMDATA=51, STREAM=52, GET=53, 
		POST=54, PUT=55, DELETE=56, PATCH=57, OPTIONS=58, HEAD=59, TRACE=60, CONNECT=61, 
		ID=62, DQUOTE=63, SQUOTE=64, LINECOMMENT=65, BLOCK_COMMENT=66, WS=67, 
		DQUOTE_START_EXPRESSION=68, DQUOTE_LBRACE=69, DQUOTE_ESCAPE_SEQUENCE=70, 
		DQUOTE_TEXT=71, SQUOTE_START_EXPRESSION=72, SQUOTE_LBRACE=73, SQUOTE_ESCAPE_SEQUENCE=74, 
		SQUOTE_TEXT=75;
	public const int
		RULE_program = 0, RULE_importStatements = 1, RULE_statement = 2, RULE_expression = 3, 
		RULE_unaryOperator = 4, RULE_binaryLogicalOperator = 5, RULE_binaryArithmeticOperator = 6, 
		RULE_assignmentStatement = 7, RULE_importStatement = 8, RULE_returnStatement = 9, 
		RULE_breakStatement = 10, RULE_continueStatement = 11, RULE_assertStatement = 12, 
		RULE_outputStatement = 13, RULE_ifStatement = 14, RULE_ifBody = 15, RULE_loopStatement = 16, 
		RULE_whileStatement = 17, RULE_eachStatement = 18, RULE_httpMethod = 19, 
		RULE_requestInvocation = 20, RULE_requestInvocationStatement = 21, RULE_querySection = 22, 
		RULE_headerSection = 23, RULE_dictionary = 24, RULE_dictionaryEntry = 25, 
		RULE_bodySection = 26, RULE_functionStatement = 27, RULE_functionParameterList = 28, 
		RULE_functionParam = 29, RULE_functionInvocation = 30, RULE_functionInvocationStatement = 31, 
		RULE_string = 32, RULE_stringContent = 33;
	public static readonly string[] ruleNames = {
		"program", "importStatements", "statement", "expression", "unaryOperator", 
		"binaryLogicalOperator", "binaryArithmeticOperator", "assignmentStatement", 
		"importStatement", "returnStatement", "breakStatement", "continueStatement", 
		"assertStatement", "outputStatement", "ifStatement", "ifBody", "loopStatement", 
		"whileStatement", "eachStatement", "httpMethod", "requestInvocation", 
		"requestInvocationStatement", "querySection", "headerSection", "dictionary", 
		"dictionaryEntry", "bodySection", "functionStatement", "functionParameterList", 
		"functionParam", "functionInvocation", "functionInvocationStatement", 
		"string", "stringContent"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'if'", "'else'", "'while'", "'loop'", "'from'", 
		"'to'", "'parallel'", "'each'", "'in'", "'assert'", "':'", "';'", "'='", 
		"'!='", "'and'", "'or'", "'not'", "'<='", "'>='", "'<'", "'>'", "'+'", 
		"'-'", "'*'", "'/'", "'('", "')'", null, "'}}'", null, "'}'", "'['", "']'", 
		"','", "'host'", "'path'", "'query'", "'headers'", "'body'", "'def'", 
		"'return'", "'break'", "'continue'", "'import'", "'out'", "'string'", 
		"'formurlencoded'", "'formdata'", "'stream'", "'GET'", "'POST'", "'PUT'", 
		"'DELETE'", "'PATCH'", "'OPTIONS'", "'HEAD'", "'TRACE'", "'CONNECT'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "VAR", "INT", "BOOL", "IF", "ELSE", "WHILE", "LOOP", "FROM", "TO", 
		"PARALLEL", "EACH", "IN", "ASSERT", "COLON", "SEMICOLON", "EQUALS", "NOTEQUALS", 
		"AND", "OR", "NOT", "LESSOREQUALTHAN", "MOREOREQUALTHAN", "LESSTHAN", 
		"MORETHAN", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "LPAREN", "RPAREN", 
		"DOUBLELBRACE", "DOUBLERBRACE", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
		"COMMA", "HOST_SECTION", "PATH_SECTION", "QUERY_SECTION", "HEADER_SECTION", 
		"BODY_SECTION", "DEF", "RETURN", "BREAK", "CONTINUE", "IMPORT", "OUT", 
		"STRING", "FORMURLENCODED", "FORMDATA", "STREAM", "GET", "POST", "PUT", 
		"DELETE", "PATCH", "OPTIONS", "HEAD", "TRACE", "CONNECT", "ID", "DQUOTE", 
		"SQUOTE", "LINECOMMENT", "BLOCK_COMMENT", "WS", "DQUOTE_START_EXPRESSION", 
		"DQUOTE_LBRACE", "DQUOTE_ESCAPE_SEQUENCE", "DQUOTE_TEXT", "SQUOTE_START_EXPRESSION", 
		"SQUOTE_LBRACE", "SQUOTE_ESCAPE_SEQUENCE", "SQUOTE_TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AssertiveParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AssertiveParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AssertiveParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AssertiveParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ImportStatementsContext imports;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AssertiveParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementsContext importStatements() {
			return GetRuleContext<ImportStatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			_localctx.imports = importStatements();
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -4296891441343383L) != 0)) {
				{
				{
				State = 69;
				statement();
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 75;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext[] importStatement() {
			return GetRuleContexts<ImportStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement(int i) {
			return GetRuleContext<ImportStatementContext>(i);
		}
		public ImportStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementsContext importStatements() {
		ImportStatementsContext _localctx = new ImportStatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_importStatements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 77;
				importStatement();
				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OutputStatementContext outputStatement() {
			return GetRuleContext<OutputStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionStatementContext functionStatement() {
			return GetRuleContext<FunctionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionInvocationStatementContext functionInvocationStatement() {
			return GetRuleContext<FunctionInvocationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequestInvocationStatementContext requestInvocationStatement() {
			return GetRuleContext<RequestInvocationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EachStatementContext eachStatement() {
			return GetRuleContext<EachStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssertStatementContext assertStatement() {
			return GetRuleContext<AssertStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OUT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				outputStatement();
				}
				break;
			case DEF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84;
				functionStatement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 85;
				returnStatement();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 86;
				breakStatement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 87;
				continueStatement();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 6);
				{
				State = 88;
				functionInvocationStatement();
				}
				break;
			case GET:
			case POST:
			case PUT:
			case DELETE:
			case PATCH:
			case OPTIONS:
			case HEAD:
			case TRACE:
			case CONNECT:
			case DQUOTE:
			case SQUOTE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 89;
				requestInvocationStatement();
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 8);
				{
				State = 90;
				assignmentStatement();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 9);
				{
				State = 91;
				ifStatement();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 92;
				whileStatement();
				}
				break;
			case LOOP:
				EnterOuterAlt(_localctx, 11);
				{
				State = 93;
				loopStatement();
				}
				break;
			case EACH:
				EnterOuterAlt(_localctx, 12);
				{
				State = 94;
				eachStatement();
				}
				break;
			case ASSERT:
				EnterOuterAlt(_localctx, 13);
				{
				State = 95;
				assertStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesesExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AssertiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AssertiveParser.RPAREN, 0); }
		public ParenthesesExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesesExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RequestInvocationExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequestInvocationContext requestInvocation() {
			return GetRuleContext<RequestInvocationContext>(0);
		}
		public RequestInvocationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequestInvocationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DictionaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AssertiveParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryContext dictionary() {
			return GetRuleContext<DictionaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AssertiveParser.RBRACE, 0); }
		public DictionaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryLogicalExpressionContext : ExpressionContext {
		public ExpressionContext operandLeft;
		public ExpressionContext operandRight;
		[System.Diagnostics.DebuggerNonUserCode] public BinaryLogicalOperatorContext binaryLogicalOperator() {
			return GetRuleContext<BinaryLogicalOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryLogicalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryLogicalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryLogicalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryArithmeticExpressionContext : ExpressionContext {
		public ExpressionContext operandLeft;
		public ExpressionContext operandRight;
		[System.Diagnostics.DebuggerNonUserCode] public BinaryArithmeticOperatorContext binaryArithmeticOperator() {
			return GetRuleContext<BinaryArithmeticOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryArithmeticExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryArithmeticExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(AssertiveParser.VAR, 0); }
		public VarExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public StringExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACK() { return GetToken(AssertiveParser.LBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACK() { return GetToken(AssertiveParser.RBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AssertiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AssertiveParser.COMMA, i);
		}
		public ListExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(AssertiveParser.INT, 0); }
		public NumericExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionInvocationExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionInvocationContext functionInvocation() {
			return GetRuleContext<FunctionInvocationContext>(0);
		}
		public FunctionInvocationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionInvocationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(AssertiveParser.BOOL, 0); }
		public BoolExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				_localctx = new VarExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 99;
				Match(VAR);
				}
				break;
			case 2:
				{
				_localctx = new NumericExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 100;
				Match(INT);
				}
				break;
			case 3:
				{
				_localctx = new BoolExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 101;
				Match(BOOL);
				}
				break;
			case 4:
				{
				_localctx = new StringExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 102;
				@string();
				}
				break;
			case 5:
				{
				_localctx = new DictionaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 103;
				Match(LBRACE);
				State = 104;
				dictionary();
				State = 105;
				Match(RBRACE);
				}
				break;
			case 6:
				{
				_localctx = new ListExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 107;
				Match(LBRACK);
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -4503577883574265L) != 0)) {
					{
					State = 108;
					expression(0);
					State = 113;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 109;
						Match(COMMA);
						State = 110;
						expression(0);
						}
						}
						State = 115;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 118;
				Match(RBRACK);
				}
				break;
			case 7:
				{
				_localctx = new RequestInvocationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 119;
				requestInvocation();
				}
				break;
			case 8:
				{
				_localctx = new FunctionInvocationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 120;
				functionInvocation();
				}
				break;
			case 9:
				{
				_localctx = new ParenthesesExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 121;
				Match(LPAREN);
				State = 122;
				expression(0);
				State = 123;
				Match(RPAREN);
				}
				break;
			case 10:
				{
				_localctx = new UnaryLogicalExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 125;
				unaryOperator();
				State = 126;
				expression(3);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 140;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 138;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new BinaryArithmeticExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryArithmeticExpressionContext)_localctx).operandLeft = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 130;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 131;
						binaryArithmeticOperator();
						State = 132;
						((BinaryArithmeticExpressionContext)_localctx).operandRight = expression(3);
						}
						break;
					case 2:
						{
						_localctx = new BinaryLogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryLogicalExpressionContext)_localctx).operandLeft = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 134;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 135;
						binaryLogicalOperator();
						State = 136;
						((BinaryLogicalExpressionContext)_localctx).operandRight = expression(2);
						}
						break;
					}
					} 
				}
				State = 142;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(AssertiveParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 8, RULE_unaryOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			Match(NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryLogicalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(AssertiveParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(AssertiveParser.OR, 0); }
		public BinaryLogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryLogicalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryLogicalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryLogicalOperatorContext binaryLogicalOperator() {
		BinaryLogicalOperatorContext _localctx = new BinaryLogicalOperatorContext(Context, State);
		EnterRule(_localctx, 10, RULE_binaryLogicalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryArithmeticOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(AssertiveParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(AssertiveParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(AssertiveParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AssertiveParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MORETHAN() { return GetToken(AssertiveParser.MORETHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOREOREQUALTHAN() { return GetToken(AssertiveParser.MOREOREQUALTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(AssertiveParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSOREQUALTHAN() { return GetToken(AssertiveParser.LESSOREQUALTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(AssertiveParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUALS() { return GetToken(AssertiveParser.NOTEQUALS, 0); }
		public BinaryArithmeticOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryArithmeticOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryArithmeticOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryArithmeticOperatorContext binaryArithmeticOperator() {
		BinaryArithmeticOperatorContext _localctx = new BinaryArithmeticOperatorContext(Context, State);
		EnterRule(_localctx, 12, RULE_binaryArithmeticOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 534970368L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(AssertiveParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(AssertiveParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AssertiveParser.SEMICOLON, 0); }
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_assignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(VAR);
			State = 150;
			Match(EQUALS);
			State = 151;
			expression(0);
			State = 152;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(AssertiveParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AssertiveParser.SEMICOLON, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			Match(IMPORT);
			State = 155;
			@string();
			State = 156;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(AssertiveParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AssertiveParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(RETURN);
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -4503577883574265L) != 0)) {
				{
				State = 159;
				expression(0);
				}
			}

			State = 162;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(AssertiveParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AssertiveParser.SEMICOLON, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(BREAK);
			State = 165;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(AssertiveParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AssertiveParser.SEMICOLON, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			Match(CONTINUE);
			State = 168;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertStatementContext : ParserRuleContext {
		public StringContext description;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(AssertiveParser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AssertiveParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public AssertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertStatementContext assertStatement() {
		AssertStatementContext _localctx = new AssertStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_assertStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			Match(ASSERT);
			State = 171;
			expression(0);
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DQUOTE || _la==SQUOTE) {
				{
				State = 172;
				_localctx.description = @string();
				}
			}

			State = 175;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(AssertiveParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AssertiveParser.SEMICOLON, 0); }
		public OutputStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputStatementContext outputStatement() {
		OutputStatementContext _localctx = new OutputStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_outputStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			Match(OUT);
			State = 178;
			expression(0);
			State = 179;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public IfBodyContext exprTrue;
		public IfBodyContext exprFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(AssertiveParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AssertiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AssertiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LBRACE() { return GetTokens(AssertiveParser.LBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE(int i) {
			return GetToken(AssertiveParser.LBRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RBRACE() { return GetTokens(AssertiveParser.RBRACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE(int i) {
			return GetToken(AssertiveParser.RBRACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBodyContext[] ifBody() {
			return GetRuleContexts<IfBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBodyContext ifBody(int i) {
			return GetRuleContext<IfBodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(AssertiveParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(IF);
			State = 182;
			Match(LPAREN);
			State = 183;
			expression(0);
			State = 184;
			Match(RPAREN);
			State = 185;
			Match(LBRACE);
			State = 186;
			_localctx.exprTrue = ifBody();
			State = 187;
			Match(RBRACE);
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 188;
				Match(ELSE);
				State = 189;
				Match(LBRACE);
				State = 190;
				_localctx.exprFalse = ifBody();
				State = 191;
				Match(RBRACE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBodyContext ifBody() {
		IfBodyContext _localctx = new IfBodyContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -4296891441343383L) != 0)) {
				{
				{
				State = 195;
				statement();
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		public ExpressionContext fromExp;
		public ExpressionContext toExp;
		public ExpressionContext parExpression;
		public StatementContext block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP() { return GetToken(AssertiveParser.LOOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(AssertiveParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(AssertiveParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AssertiveParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AssertiveParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(AssertiveParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARALLEL() { return GetToken(AssertiveParser.PARALLEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_loopStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(LOOP);
			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VAR) {
				{
				State = 202;
				Match(VAR);
				}
			}

			State = 205;
			Match(FROM);
			State = 206;
			_localctx.fromExp = expression(0);
			State = 207;
			Match(TO);
			State = 208;
			_localctx.toExp = expression(0);
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARALLEL) {
				{
				State = 209;
				Match(PARALLEL);
				State = 210;
				_localctx.parExpression = expression(0);
				}
			}

			State = 213;
			Match(LBRACE);
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -4296891441343383L) != 0)) {
				{
				{
				State = 214;
				_localctx.block = statement();
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 220;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public StatementContext block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(AssertiveParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AssertiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AssertiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AssertiveParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AssertiveParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(WHILE);
			State = 223;
			Match(LPAREN);
			State = 224;
			expression(0);
			State = 225;
			Match(RPAREN);
			State = 226;
			Match(LBRACE);
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -4296891441343383L) != 0)) {
				{
				{
				State = 227;
				_localctx.block = statement();
				}
				}
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 233;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EachStatementContext : ParserRuleContext {
		public StatementContext block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(AssertiveParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AssertiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(AssertiveParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(AssertiveParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AssertiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AssertiveParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AssertiveParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public EachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eachStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EachStatementContext eachStatement() {
		EachStatementContext _localctx = new EachStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_eachStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			Match(EACH);
			State = 236;
			Match(LPAREN);
			State = 237;
			Match(VAR);
			State = 238;
			Match(IN);
			State = 239;
			expression(0);
			State = 240;
			Match(RPAREN);
			State = 241;
			Match(LBRACE);
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -4296891441343383L) != 0)) {
				{
				{
				State = 242;
				_localctx.block = statement();
				}
				}
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 248;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HttpMethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(AssertiveParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POST() { return GetToken(AssertiveParser.POST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUT() { return GetToken(AssertiveParser.PUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(AssertiveParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATCH() { return GetToken(AssertiveParser.PATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(AssertiveParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEAD() { return GetToken(AssertiveParser.HEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRACE() { return GetToken(AssertiveParser.TRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECT() { return GetToken(AssertiveParser.CONNECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public HttpMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_httpMethod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHttpMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HttpMethodContext httpMethod() {
		HttpMethodContext _localctx = new HttpMethodContext(Context, State);
		EnterRule(_localctx, 38, RULE_httpMethod);
		try {
			State = 260;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 250;
				Match(GET);
				}
				break;
			case POST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251;
				Match(POST);
				}
				break;
			case PUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 252;
				Match(PUT);
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 253;
				Match(DELETE);
				}
				break;
			case PATCH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 254;
				Match(PATCH);
				}
				break;
			case OPTIONS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 255;
				Match(OPTIONS);
				}
				break;
			case HEAD:
				EnterOuterAlt(_localctx, 7);
				{
				State = 256;
				Match(HEAD);
				}
				break;
			case TRACE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 257;
				Match(TRACE);
				}
				break;
			case CONNECT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 258;
				Match(CONNECT);
				}
				break;
			case DQUOTE:
			case SQUOTE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 259;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequestInvocationContext : ParserRuleContext {
		public StringContext uri;
		[System.Diagnostics.DebuggerNonUserCode] public HttpMethodContext httpMethod() {
			return GetRuleContext<HttpMethodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuerySectionContext[] querySection() {
			return GetRuleContexts<QuerySectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuerySectionContext querySection(int i) {
			return GetRuleContext<QuerySectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeaderSectionContext[] headerSection() {
			return GetRuleContexts<HeaderSectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HeaderSectionContext headerSection(int i) {
			return GetRuleContext<HeaderSectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodySectionContext[] bodySection() {
			return GetRuleContexts<BodySectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodySectionContext bodySection(int i) {
			return GetRuleContext<BodySectionContext>(i);
		}
		public RequestInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requestInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequestInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequestInvocationContext requestInvocation() {
		RequestInvocationContext _localctx = new RequestInvocationContext(Context, State);
		EnterRule(_localctx, 40, RULE_requestInvocation);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			httpMethod();
			State = 263;
			_localctx.uri = @string();
			State = 269;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 267;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case QUERY_SECTION:
						{
						State = 264;
						querySection();
						}
						break;
					case HEADER_SECTION:
						{
						State = 265;
						headerSection();
						}
						break;
					case BODY_SECTION:
						{
						State = 266;
						bodySection();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 271;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequestInvocationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequestInvocationContext requestInvocation() {
			return GetRuleContext<RequestInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AssertiveParser.SEMICOLON, 0); }
		public RequestInvocationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requestInvocationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRequestInvocationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RequestInvocationStatementContext requestInvocationStatement() {
		RequestInvocationStatementContext _localctx = new RequestInvocationStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_requestInvocationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			requestInvocation();
			State = 273;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_SECTION() { return GetToken(AssertiveParser.QUERY_SECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public QuerySectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySectionContext querySection() {
		QuerySectionContext _localctx = new QuerySectionContext(Context, State);
		EnterRule(_localctx, 44, RULE_querySection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			Match(QUERY_SECTION);
			State = 276;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderSectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADER_SECTION() { return GetToken(AssertiveParser.HEADER_SECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HeaderSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headerSection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaderSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderSectionContext headerSection() {
		HeaderSectionContext _localctx = new HeaderSectionContext(Context, State);
		EnterRule(_localctx, 46, RULE_headerSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			Match(HEADER_SECTION);
			State = 279;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryEntryContext[] dictionaryEntry() {
			return GetRuleContexts<DictionaryEntryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DictionaryEntryContext dictionaryEntry(int i) {
			return GetRuleContext<DictionaryEntryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AssertiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AssertiveParser.COMMA, i);
		}
		public DictionaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryContext dictionary() {
		DictionaryContext _localctx = new DictionaryContext(Context, State);
		EnterRule(_localctx, 48, RULE_dictionary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -4503577883574265L) != 0)) {
				{
				State = 281;
				dictionaryEntry();
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 282;
					Match(COMMA);
					State = 283;
					dictionaryEntry();
					}
					}
					State = 288;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryEntryContext : ParserRuleContext {
		public ExpressionContext key;
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(AssertiveParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DictionaryEntryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryEntry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryEntry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryEntryContext dictionaryEntry() {
		DictionaryEntryContext _localctx = new DictionaryEntryContext(Context, State);
		EnterRule(_localctx, 50, RULE_dictionaryEntry);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			_localctx.key = expression(0);
			State = 292;
			Match(COLON);
			State = 293;
			_localctx.value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodySectionContext : ParserRuleContext {
		public IToken contentType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY_SECTION() { return GetToken(AssertiveParser.BODY_SECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(AssertiveParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMURLENCODED() { return GetToken(AssertiveParser.FORMURLENCODED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMDATA() { return GetToken(AssertiveParser.FORMDATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM() { return GetToken(AssertiveParser.STREAM, 0); }
		public BodySectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bodySection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBodySection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodySectionContext bodySection() {
		BodySectionContext _localctx = new BodySectionContext(Context, State);
		EnterRule(_localctx, 52, RULE_bodySection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(BODY_SECTION);
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8444249301319680L) != 0)) {
				{
				State = 296;
				_localctx.contentType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8444249301319680L) != 0)) ) {
					_localctx.contentType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 299;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStatementContext : ParserRuleContext {
		public IToken functionName;
		public IToken assertFunction;
		public StatementContext block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF() { return GetToken(AssertiveParser.DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(AssertiveParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(AssertiveParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(AssertiveParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(AssertiveParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AssertiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AssertiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(AssertiveParser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterListContext functionParameterList() {
			return GetRuleContext<FunctionParameterListContext>(0);
		}
		public FunctionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStatementContext functionStatement() {
		FunctionStatementContext _localctx = new FunctionStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_functionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(DEF);
			State = 302;
			_localctx.functionName = Match(ID);
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DQUOTE || _la==SQUOTE) {
				{
				State = 303;
				@string();
				}
			}

			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 306;
				Match(LPAREN);
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VAR) {
					{
					State = 307;
					functionParameterList();
					}
				}

				State = 310;
				Match(RPAREN);
				}
			}

			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSERT) {
				{
				State = 313;
				Match(ASSERT);
				State = 314;
				_localctx.assertFunction = Match(ID);
				}
			}

			State = 317;
			Match(LBRACE);
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -4296891441343383L) != 0)) {
				{
				{
				State = 318;
				_localctx.block = statement();
				}
				}
				State = 323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 324;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParamContext[] functionParam() {
			return GetRuleContexts<FunctionParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParamContext functionParam(int i) {
			return GetRuleContext<FunctionParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AssertiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AssertiveParser.COMMA, i);
		}
		public FunctionParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterListContext functionParameterList() {
		FunctionParameterListContext _localctx = new FunctionParameterListContext(Context, State);
		EnterRule(_localctx, 56, RULE_functionParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 326;
			functionParam();
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 327;
				Match(COMMA);
				State = 328;
				functionParam();
				}
				}
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(AssertiveParser.VAR, 0); }
		public FunctionParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParamContext functionParam() {
		FunctionParamContext _localctx = new FunctionParamContext(Context, State);
		EnterRule(_localctx, 58, RULE_functionParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			Match(VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(AssertiveParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(AssertiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(AssertiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(AssertiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(AssertiveParser.COMMA, i);
		}
		public FunctionInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionInvocationContext functionInvocation() {
		FunctionInvocationContext _localctx = new FunctionInvocationContext(Context, State);
		EnterRule(_localctx, 60, RULE_functionInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			Match(ID);
			State = 349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 337;
				Match(LPAREN);
				State = 346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 1)) & ~0x3f) == 0 && ((1L << (_la - 1)) & -4503577883574265L) != 0)) {
					{
					State = 338;
					expression(0);
					State = 343;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 339;
						Match(COMMA);
						State = 340;
						expression(0);
						}
						}
						State = 345;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 348;
				Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionInvocationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionInvocationContext functionInvocation() {
			return GetRuleContext<FunctionInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(AssertiveParser.SEMICOLON, 0); }
		public FunctionInvocationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionInvocationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionInvocationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionInvocationStatementContext functionInvocationStatement() {
		FunctionInvocationStatementContext _localctx = new FunctionInvocationStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_functionInvocationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			functionInvocation();
			State = 352;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DQUOTE() { return GetTokens(AssertiveParser.DQUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DQUOTE(int i) {
			return GetToken(AssertiveParser.DQUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContentContext[] stringContent() {
			return GetRuleContexts<StringContentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContentContext stringContent(int i) {
			return GetRuleContext<StringContentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SQUOTE() { return GetTokens(AssertiveParser.SQUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUOTE(int i) {
			return GetToken(AssertiveParser.SQUOTE, i);
		}
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 64, RULE_string);
		int _la;
		try {
			State = 370;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DQUOTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 354;
				Match(DQUOTE);
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 255L) != 0)) {
					{
					{
					State = 355;
					stringContent();
					}
					}
					State = 360;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 361;
				Match(DQUOTE);
				}
				break;
			case SQUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 362;
				Match(SQUOTE);
				State = 366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & 255L) != 0)) {
					{
					{
					State = 363;
					stringContent();
					}
					}
					State = 368;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 369;
				Match(SQUOTE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DQUOTE_TEXT() { return GetToken(AssertiveParser.DQUOTE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DQUOTE_ESCAPE_SEQUENCE() { return GetToken(AssertiveParser.DQUOTE_ESCAPE_SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DQUOTE_START_EXPRESSION() { return GetToken(AssertiveParser.DQUOTE_START_EXPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLERBRACE() { return GetToken(AssertiveParser.DOUBLERBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DQUOTE_LBRACE() { return GetToken(AssertiveParser.DQUOTE_LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUOTE_TEXT() { return GetToken(AssertiveParser.SQUOTE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUOTE_ESCAPE_SEQUENCE() { return GetToken(AssertiveParser.SQUOTE_ESCAPE_SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUOTE_START_EXPRESSION() { return GetToken(AssertiveParser.SQUOTE_START_EXPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQUOTE_LBRACE() { return GetToken(AssertiveParser.SQUOTE_LBRACE, 0); }
		public StringContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringContent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAssertiveParserVisitor<TResult> typedVisitor = visitor as IAssertiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContentContext stringContent() {
		StringContentContext _localctx = new StringContentContext(Context, State);
		EnterRule(_localctx, 66, RULE_stringContent);
		try {
			State = 386;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DQUOTE_TEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 372;
				Match(DQUOTE_TEXT);
				}
				break;
			case DQUOTE_ESCAPE_SEQUENCE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 373;
				Match(DQUOTE_ESCAPE_SEQUENCE);
				}
				break;
			case DQUOTE_START_EXPRESSION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 374;
				Match(DQUOTE_START_EXPRESSION);
				State = 375;
				expression(0);
				State = 376;
				Match(DOUBLERBRACE);
				}
				break;
			case DQUOTE_LBRACE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 378;
				Match(DQUOTE_LBRACE);
				}
				break;
			case SQUOTE_TEXT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 379;
				Match(SQUOTE_TEXT);
				}
				break;
			case SQUOTE_ESCAPE_SEQUENCE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 380;
				Match(SQUOTE_ESCAPE_SEQUENCE);
				}
				break;
			case SQUOTE_START_EXPRESSION:
				EnterOuterAlt(_localctx, 7);
				{
				State = 381;
				Match(SQUOTE_START_EXPRESSION);
				State = 382;
				expression(0);
				State = 383;
				Match(DOUBLERBRACE);
				}
				break;
			case SQUOTE_LBRACE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 385;
				Match(SQUOTE_LBRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,75,389,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,1,0,5,0,71,8,0,10,
		0,12,0,74,9,0,1,0,1,0,1,1,5,1,79,8,1,10,1,12,1,82,9,1,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,97,8,2,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,112,8,3,10,3,12,3,115,9,3,3,3,117,8,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,129,8,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,5,3,139,8,3,10,3,12,3,142,9,3,1,4,1,4,1,5,1,5,1,6,1,6,1,
		7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,3,9,161,8,9,1,9,1,9,1,10,1,10,
		1,10,1,11,1,11,1,11,1,12,1,12,1,12,3,12,174,8,12,1,12,1,12,1,13,1,13,1,
		13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,
		14,194,8,14,1,15,5,15,197,8,15,10,15,12,15,200,9,15,1,16,1,16,3,16,204,
		8,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,212,8,16,1,16,1,16,5,16,216,8,
		16,10,16,12,16,219,9,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,5,17,229,
		8,17,10,17,12,17,232,9,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,18,5,18,244,8,18,10,18,12,18,247,9,18,1,18,1,18,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,3,19,261,8,19,1,20,1,20,1,20,1,20,1,20,5,
		20,268,8,20,10,20,12,20,271,9,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,
		23,1,23,1,24,1,24,1,24,5,24,285,8,24,10,24,12,24,288,9,24,3,24,290,8,24,
		1,25,1,25,1,25,1,25,1,26,1,26,3,26,298,8,26,1,26,1,26,1,27,1,27,1,27,3,
		27,305,8,27,1,27,1,27,3,27,309,8,27,1,27,3,27,312,8,27,1,27,1,27,3,27,
		316,8,27,1,27,1,27,5,27,320,8,27,10,27,12,27,323,9,27,1,27,1,27,1,28,1,
		28,1,28,5,28,330,8,28,10,28,12,28,333,9,28,1,29,1,29,1,30,1,30,1,30,1,
		30,1,30,5,30,342,8,30,10,30,12,30,345,9,30,3,30,347,8,30,1,30,3,30,350,
		8,30,1,31,1,31,1,31,1,32,1,32,5,32,357,8,32,10,32,12,32,360,9,32,1,32,
		1,32,1,32,5,32,365,8,32,10,32,12,32,368,9,32,1,32,3,32,371,8,32,1,33,1,
		33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,387,
		8,33,1,33,0,1,6,34,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,0,3,1,0,18,19,2,0,16,17,21,
		28,1,0,49,52,424,0,68,1,0,0,0,2,80,1,0,0,0,4,96,1,0,0,0,6,128,1,0,0,0,
		8,143,1,0,0,0,10,145,1,0,0,0,12,147,1,0,0,0,14,149,1,0,0,0,16,154,1,0,
		0,0,18,158,1,0,0,0,20,164,1,0,0,0,22,167,1,0,0,0,24,170,1,0,0,0,26,177,
		1,0,0,0,28,181,1,0,0,0,30,198,1,0,0,0,32,201,1,0,0,0,34,222,1,0,0,0,36,
		235,1,0,0,0,38,260,1,0,0,0,40,262,1,0,0,0,42,272,1,0,0,0,44,275,1,0,0,
		0,46,278,1,0,0,0,48,289,1,0,0,0,50,291,1,0,0,0,52,295,1,0,0,0,54,301,1,
		0,0,0,56,326,1,0,0,0,58,334,1,0,0,0,60,336,1,0,0,0,62,351,1,0,0,0,64,370,
		1,0,0,0,66,386,1,0,0,0,68,72,3,2,1,0,69,71,3,4,2,0,70,69,1,0,0,0,71,74,
		1,0,0,0,72,70,1,0,0,0,72,73,1,0,0,0,73,75,1,0,0,0,74,72,1,0,0,0,75,76,
		5,0,0,1,76,1,1,0,0,0,77,79,3,16,8,0,78,77,1,0,0,0,79,82,1,0,0,0,80,78,
		1,0,0,0,80,81,1,0,0,0,81,3,1,0,0,0,82,80,1,0,0,0,83,97,3,26,13,0,84,97,
		3,54,27,0,85,97,3,18,9,0,86,97,3,20,10,0,87,97,3,22,11,0,88,97,3,62,31,
		0,89,97,3,42,21,0,90,97,3,14,7,0,91,97,3,28,14,0,92,97,3,34,17,0,93,97,
		3,32,16,0,94,97,3,36,18,0,95,97,3,24,12,0,96,83,1,0,0,0,96,84,1,0,0,0,
		96,85,1,0,0,0,96,86,1,0,0,0,96,87,1,0,0,0,96,88,1,0,0,0,96,89,1,0,0,0,
		96,90,1,0,0,0,96,91,1,0,0,0,96,92,1,0,0,0,96,93,1,0,0,0,96,94,1,0,0,0,
		96,95,1,0,0,0,97,5,1,0,0,0,98,99,6,3,-1,0,99,129,5,1,0,0,100,129,5,2,0,
		0,101,129,5,3,0,0,102,129,3,64,32,0,103,104,5,33,0,0,104,105,3,48,24,0,
		105,106,5,34,0,0,106,129,1,0,0,0,107,116,5,35,0,0,108,113,3,6,3,0,109,
		110,5,37,0,0,110,112,3,6,3,0,111,109,1,0,0,0,112,115,1,0,0,0,113,111,1,
		0,0,0,113,114,1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,116,108,1,0,0,0,
		116,117,1,0,0,0,117,118,1,0,0,0,118,129,5,36,0,0,119,129,3,40,20,0,120,
		129,3,60,30,0,121,122,5,29,0,0,122,123,3,6,3,0,123,124,5,30,0,0,124,129,
		1,0,0,0,125,126,3,8,4,0,126,127,3,6,3,3,127,129,1,0,0,0,128,98,1,0,0,0,
		128,100,1,0,0,0,128,101,1,0,0,0,128,102,1,0,0,0,128,103,1,0,0,0,128,107,
		1,0,0,0,128,119,1,0,0,0,128,120,1,0,0,0,128,121,1,0,0,0,128,125,1,0,0,
		0,129,140,1,0,0,0,130,131,10,2,0,0,131,132,3,12,6,0,132,133,3,6,3,3,133,
		139,1,0,0,0,134,135,10,1,0,0,135,136,3,10,5,0,136,137,3,6,3,2,137,139,
		1,0,0,0,138,130,1,0,0,0,138,134,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,
		0,140,141,1,0,0,0,141,7,1,0,0,0,142,140,1,0,0,0,143,144,5,20,0,0,144,9,
		1,0,0,0,145,146,7,0,0,0,146,11,1,0,0,0,147,148,7,1,0,0,148,13,1,0,0,0,
		149,150,5,1,0,0,150,151,5,16,0,0,151,152,3,6,3,0,152,153,5,15,0,0,153,
		15,1,0,0,0,154,155,5,47,0,0,155,156,3,64,32,0,156,157,5,15,0,0,157,17,
		1,0,0,0,158,160,5,44,0,0,159,161,3,6,3,0,160,159,1,0,0,0,160,161,1,0,0,
		0,161,162,1,0,0,0,162,163,5,15,0,0,163,19,1,0,0,0,164,165,5,45,0,0,165,
		166,5,15,0,0,166,21,1,0,0,0,167,168,5,46,0,0,168,169,5,15,0,0,169,23,1,
		0,0,0,170,171,5,13,0,0,171,173,3,6,3,0,172,174,3,64,32,0,173,172,1,0,0,
		0,173,174,1,0,0,0,174,175,1,0,0,0,175,176,5,15,0,0,176,25,1,0,0,0,177,
		178,5,48,0,0,178,179,3,6,3,0,179,180,5,15,0,0,180,27,1,0,0,0,181,182,5,
		4,0,0,182,183,5,29,0,0,183,184,3,6,3,0,184,185,5,30,0,0,185,186,5,33,0,
		0,186,187,3,30,15,0,187,193,5,34,0,0,188,189,5,5,0,0,189,190,5,33,0,0,
		190,191,3,30,15,0,191,192,5,34,0,0,192,194,1,0,0,0,193,188,1,0,0,0,193,
		194,1,0,0,0,194,29,1,0,0,0,195,197,3,4,2,0,196,195,1,0,0,0,197,200,1,0,
		0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,31,1,0,0,0,200,198,1,0,0,0,201,
		203,5,7,0,0,202,204,5,1,0,0,203,202,1,0,0,0,203,204,1,0,0,0,204,205,1,
		0,0,0,205,206,5,8,0,0,206,207,3,6,3,0,207,208,5,9,0,0,208,211,3,6,3,0,
		209,210,5,10,0,0,210,212,3,6,3,0,211,209,1,0,0,0,211,212,1,0,0,0,212,213,
		1,0,0,0,213,217,5,33,0,0,214,216,3,4,2,0,215,214,1,0,0,0,216,219,1,0,0,
		0,217,215,1,0,0,0,217,218,1,0,0,0,218,220,1,0,0,0,219,217,1,0,0,0,220,
		221,5,34,0,0,221,33,1,0,0,0,222,223,5,6,0,0,223,224,5,29,0,0,224,225,3,
		6,3,0,225,226,5,30,0,0,226,230,5,33,0,0,227,229,3,4,2,0,228,227,1,0,0,
		0,229,232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,233,1,0,0,0,232,
		230,1,0,0,0,233,234,5,34,0,0,234,35,1,0,0,0,235,236,5,11,0,0,236,237,5,
		29,0,0,237,238,5,1,0,0,238,239,5,12,0,0,239,240,3,6,3,0,240,241,5,30,0,
		0,241,245,5,33,0,0,242,244,3,4,2,0,243,242,1,0,0,0,244,247,1,0,0,0,245,
		243,1,0,0,0,245,246,1,0,0,0,246,248,1,0,0,0,247,245,1,0,0,0,248,249,5,
		34,0,0,249,37,1,0,0,0,250,261,5,53,0,0,251,261,5,54,0,0,252,261,5,55,0,
		0,253,261,5,56,0,0,254,261,5,57,0,0,255,261,5,58,0,0,256,261,5,59,0,0,
		257,261,5,60,0,0,258,261,5,61,0,0,259,261,3,64,32,0,260,250,1,0,0,0,260,
		251,1,0,0,0,260,252,1,0,0,0,260,253,1,0,0,0,260,254,1,0,0,0,260,255,1,
		0,0,0,260,256,1,0,0,0,260,257,1,0,0,0,260,258,1,0,0,0,260,259,1,0,0,0,
		261,39,1,0,0,0,262,263,3,38,19,0,263,269,3,64,32,0,264,268,3,44,22,0,265,
		268,3,46,23,0,266,268,3,52,26,0,267,264,1,0,0,0,267,265,1,0,0,0,267,266,
		1,0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,41,1,0,0,0,
		271,269,1,0,0,0,272,273,3,40,20,0,273,274,5,15,0,0,274,43,1,0,0,0,275,
		276,5,40,0,0,276,277,3,6,3,0,277,45,1,0,0,0,278,279,5,41,0,0,279,280,3,
		6,3,0,280,47,1,0,0,0,281,286,3,50,25,0,282,283,5,37,0,0,283,285,3,50,25,
		0,284,282,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,
		290,1,0,0,0,288,286,1,0,0,0,289,281,1,0,0,0,289,290,1,0,0,0,290,49,1,0,
		0,0,291,292,3,6,3,0,292,293,5,14,0,0,293,294,3,6,3,0,294,51,1,0,0,0,295,
		297,5,42,0,0,296,298,7,2,0,0,297,296,1,0,0,0,297,298,1,0,0,0,298,299,1,
		0,0,0,299,300,3,6,3,0,300,53,1,0,0,0,301,302,5,43,0,0,302,304,5,62,0,0,
		303,305,3,64,32,0,304,303,1,0,0,0,304,305,1,0,0,0,305,311,1,0,0,0,306,
		308,5,29,0,0,307,309,3,56,28,0,308,307,1,0,0,0,308,309,1,0,0,0,309,310,
		1,0,0,0,310,312,5,30,0,0,311,306,1,0,0,0,311,312,1,0,0,0,312,315,1,0,0,
		0,313,314,5,13,0,0,314,316,5,62,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,
		317,1,0,0,0,317,321,5,33,0,0,318,320,3,4,2,0,319,318,1,0,0,0,320,323,1,
		0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,324,1,0,0,0,323,321,1,0,0,0,
		324,325,5,34,0,0,325,55,1,0,0,0,326,331,3,58,29,0,327,328,5,37,0,0,328,
		330,3,58,29,0,329,327,1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,
		1,0,0,0,332,57,1,0,0,0,333,331,1,0,0,0,334,335,5,1,0,0,335,59,1,0,0,0,
		336,349,5,62,0,0,337,346,5,29,0,0,338,343,3,6,3,0,339,340,5,37,0,0,340,
		342,3,6,3,0,341,339,1,0,0,0,342,345,1,0,0,0,343,341,1,0,0,0,343,344,1,
		0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,346,338,1,0,0,0,346,347,1,0,0,0,
		347,348,1,0,0,0,348,350,5,30,0,0,349,337,1,0,0,0,349,350,1,0,0,0,350,61,
		1,0,0,0,351,352,3,60,30,0,352,353,5,15,0,0,353,63,1,0,0,0,354,358,5,63,
		0,0,355,357,3,66,33,0,356,355,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,
		358,359,1,0,0,0,359,361,1,0,0,0,360,358,1,0,0,0,361,371,5,63,0,0,362,366,
		5,64,0,0,363,365,3,66,33,0,364,363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,
		0,0,366,367,1,0,0,0,367,369,1,0,0,0,368,366,1,0,0,0,369,371,5,64,0,0,370,
		354,1,0,0,0,370,362,1,0,0,0,371,65,1,0,0,0,372,387,5,71,0,0,373,387,5,
		70,0,0,374,375,5,68,0,0,375,376,3,6,3,0,376,377,5,32,0,0,377,387,1,0,0,
		0,378,387,5,69,0,0,379,387,5,75,0,0,380,387,5,74,0,0,381,382,5,72,0,0,
		382,383,3,6,3,0,383,384,5,32,0,0,384,387,1,0,0,0,385,387,5,73,0,0,386,
		372,1,0,0,0,386,373,1,0,0,0,386,374,1,0,0,0,386,378,1,0,0,0,386,379,1,
		0,0,0,386,380,1,0,0,0,386,381,1,0,0,0,386,385,1,0,0,0,387,67,1,0,0,0,36,
		72,80,96,113,116,128,138,140,160,173,193,198,203,211,217,230,245,260,267,
		269,286,289,297,304,308,311,315,321,331,343,346,349,358,366,370,386
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
