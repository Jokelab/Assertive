//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/dev/private/Assertive/Assertive/Language/AssertiveLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AssertiveLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		VAR=1, INT=2, BOOL=3, IF=4, ELSE=5, WHILE=6, LOOP=7, FROM=8, TO=9, PARALLEL=10, 
		EACH=11, IN=12, ASSERT=13, COLON=14, SEMICOLON=15, EQUALS=16, NOTEQUALS=17, 
		AND=18, OR=19, NOT=20, LESSOREQUALTHAN=21, MOREOREQUALTHAN=22, LESSTHAN=23, 
		MORETHAN=24, PLUS=25, MINUS=26, MULTIPLY=27, DIVIDE=28, LPAREN=29, RPAREN=30, 
		DOUBLELBRACE=31, DOUBLERBRACE=32, LBRACE=33, RBRACE=34, LBRACK=35, RBRACK=36, 
		COMMA=37, HOST_SECTION=38, PATH_SECTION=39, QUERY_SECTION=40, HEADER_SECTION=41, 
		BODY_SECTION=42, DEF=43, RETURN=44, BREAK=45, CONTINUE=46, IMPORT=47, 
		OUT=48, STRING=49, FORMURLENCODED=50, FORMDATA=51, STREAM=52, GET=53, 
		POST=54, PUT=55, DELETE=56, PATCH=57, OPTIONS=58, HEAD=59, TRACE=60, CONNECT=61, 
		ID=62, DQUOTE=63, SQUOTE=64, LINECOMMENT=65, BLOCK_COMMENT=66, WS=67, 
		DQUOTE_START_EXPRESSION=68, DQUOTE_LBRACE=69, DQUOTE_ESCAPE_SEQUENCE=70, 
		DQUOTE_TEXT=71, SQUOTE_START_EXPRESSION=72, SQUOTE_LBRACE=73, SQUOTE_ESCAPE_SEQUENCE=74, 
		SQUOTE_TEXT=75;
	public const int
		IN_DQUOTE_STRING=1, IN_SQUOTE_STRING=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "IN_DQUOTE_STRING", "IN_SQUOTE_STRING"
	};

	public static readonly string[] ruleNames = {
		"VAR", "INT", "BOOL", "IF", "ELSE", "WHILE", "LOOP", "FROM", "TO", "PARALLEL", 
		"EACH", "IN", "ASSERT", "COLON", "SEMICOLON", "EQUALS", "NOTEQUALS", "AND", 
		"OR", "NOT", "LESSOREQUALTHAN", "MOREOREQUALTHAN", "LESSTHAN", "MORETHAN", 
		"PLUS", "MINUS", "MULTIPLY", "DIVIDE", "LPAREN", "RPAREN", "DOUBLELBRACE", 
		"DOUBLERBRACE", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "COMMA", "HOST_SECTION", 
		"PATH_SECTION", "QUERY_SECTION", "HEADER_SECTION", "BODY_SECTION", "DEF", 
		"RETURN", "BREAK", "CONTINUE", "IMPORT", "OUT", "STRING", "FORMURLENCODED", 
		"FORMDATA", "STREAM", "GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS", 
		"HEAD", "TRACE", "CONNECT", "ID", "DQUOTE", "SQUOTE", "LINECOMMENT", "BLOCK_COMMENT", 
		"WS", "DQUOTE_START_EXPRESSION", "DQUOTE_LBRACE", "DQUOTE_ESCAPE_SEQUENCE", 
		"DQUOTE_IN_STRING", "DQUOTE_TEXT", "SQUOTE_START_EXPRESSION", "SQUOTE_LBRACE", 
		"SQUOTE_ESCAPE_SEQUENCE", "SQUOTE_IN_STRING", "SQUOTE_TEXT"
	};


	public AssertiveLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AssertiveLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'if'", "'else'", "'while'", "'loop'", "'from'", 
		"'to'", "'parallel'", "'each'", "'in'", "'assert'", "':'", "';'", "'='", 
		"'!='", "'and'", "'or'", "'not'", "'<='", "'>='", "'<'", "'>'", "'+'", 
		"'-'", "'*'", "'/'", "'('", "')'", null, "'}}'", null, "'}'", "'['", "']'", 
		"','", "'host'", "'path'", "'query'", "'headers'", "'body'", "'def'", 
		"'return'", "'break'", "'continue'", "'import'", "'out'", "'string'", 
		"'formurlencoded'", "'formdata'", "'stream'", "'GET'", "'POST'", "'PUT'", 
		"'DELETE'", "'PATCH'", "'OPTIONS'", "'HEAD'", "'TRACE'", "'CONNECT'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "VAR", "INT", "BOOL", "IF", "ELSE", "WHILE", "LOOP", "FROM", "TO", 
		"PARALLEL", "EACH", "IN", "ASSERT", "COLON", "SEMICOLON", "EQUALS", "NOTEQUALS", 
		"AND", "OR", "NOT", "LESSOREQUALTHAN", "MOREOREQUALTHAN", "LESSTHAN", 
		"MORETHAN", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "LPAREN", "RPAREN", 
		"DOUBLELBRACE", "DOUBLERBRACE", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
		"COMMA", "HOST_SECTION", "PATH_SECTION", "QUERY_SECTION", "HEADER_SECTION", 
		"BODY_SECTION", "DEF", "RETURN", "BREAK", "CONTINUE", "IMPORT", "OUT", 
		"STRING", "FORMURLENCODED", "FORMDATA", "STREAM", "GET", "POST", "PUT", 
		"DELETE", "PATCH", "OPTIONS", "HEAD", "TRACE", "CONNECT", "ID", "DQUOTE", 
		"SQUOTE", "LINECOMMENT", "BLOCK_COMMENT", "WS", "DQUOTE_START_EXPRESSION", 
		"DQUOTE_LBRACE", "DQUOTE_ESCAPE_SEQUENCE", "DQUOTE_TEXT", "SQUOTE_START_EXPRESSION", 
		"SQUOTE_LBRACE", "SQUOTE_ESCAPE_SEQUENCE", "SQUOTE_TEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AssertiveLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AssertiveLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,75,540,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
		7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
		7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
		7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
		7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
		7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,
		7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,
		7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,
		7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,
		7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,
		7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,
		7,76,1,0,1,0,1,0,1,1,3,1,162,8,1,1,1,4,1,165,8,1,11,1,12,1,166,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,178,8,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
		4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,
		1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
		11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,
		15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,
		19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,
		25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,
		30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,
		36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,
		39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,
		41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
		44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
		45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,
		48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
		49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
		50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,
		53,1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
		56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
		58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,
		60,1,60,1,60,1,60,1,60,1,61,1,61,5,61,452,8,61,10,61,12,61,455,9,61,1,
		62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,5,64,469,8,64,
		10,64,12,64,472,9,64,1,64,1,64,1,65,1,65,1,65,1,65,5,65,480,8,65,10,65,
		12,65,483,9,65,1,65,1,65,1,65,1,65,1,65,1,66,4,66,491,8,66,11,66,12,66,
		492,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,69,1,69,1,69,1,69,1,
		69,1,70,1,70,1,70,1,70,1,70,1,71,4,71,515,8,71,11,71,12,71,516,1,72,1,
		72,1,72,1,72,1,72,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,
		75,1,75,1,76,4,76,537,8,76,11,76,12,76,538,1,481,0,77,3,1,5,2,7,3,9,4,
		11,5,13,6,15,7,17,8,19,9,21,10,23,11,25,12,27,13,29,14,31,15,33,16,35,
		17,37,18,39,19,41,20,43,21,45,22,47,23,49,24,51,25,53,26,55,27,57,28,59,
		29,61,30,63,31,65,32,67,33,69,34,71,35,73,36,75,37,77,38,79,39,81,40,83,
		41,85,42,87,43,89,44,91,45,93,46,95,47,97,48,99,49,101,50,103,51,105,52,
		107,53,109,54,111,55,113,56,115,57,117,58,119,59,121,60,123,61,125,62,
		127,63,129,64,131,65,133,66,135,67,137,68,139,69,141,70,143,0,145,71,147,
		72,149,73,151,74,153,0,155,75,3,0,1,2,7,1,0,48,57,3,0,65,90,95,95,97,122,
		4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,3,0,
		34,34,92,92,123,123,3,0,39,39,92,92,123,123,546,0,3,1,0,0,0,0,5,1,0,0,
		0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
		1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
		0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
		1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
		0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
		1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
		0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
		1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
		0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,
		105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,
		115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,
		125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,
		135,1,0,0,0,1,137,1,0,0,0,1,139,1,0,0,0,1,141,1,0,0,0,1,143,1,0,0,0,1,
		145,1,0,0,0,2,147,1,0,0,0,2,149,1,0,0,0,2,151,1,0,0,0,2,153,1,0,0,0,2,
		155,1,0,0,0,3,157,1,0,0,0,5,161,1,0,0,0,7,177,1,0,0,0,9,179,1,0,0,0,11,
		182,1,0,0,0,13,187,1,0,0,0,15,193,1,0,0,0,17,198,1,0,0,0,19,203,1,0,0,
		0,21,206,1,0,0,0,23,215,1,0,0,0,25,220,1,0,0,0,27,223,1,0,0,0,29,230,1,
		0,0,0,31,232,1,0,0,0,33,234,1,0,0,0,35,236,1,0,0,0,37,239,1,0,0,0,39,243,
		1,0,0,0,41,246,1,0,0,0,43,250,1,0,0,0,45,253,1,0,0,0,47,256,1,0,0,0,49,
		258,1,0,0,0,51,260,1,0,0,0,53,262,1,0,0,0,55,264,1,0,0,0,57,266,1,0,0,
		0,59,268,1,0,0,0,61,270,1,0,0,0,63,272,1,0,0,0,65,277,1,0,0,0,67,282,1,
		0,0,0,69,284,1,0,0,0,71,286,1,0,0,0,73,288,1,0,0,0,75,290,1,0,0,0,77,292,
		1,0,0,0,79,297,1,0,0,0,81,302,1,0,0,0,83,308,1,0,0,0,85,316,1,0,0,0,87,
		321,1,0,0,0,89,325,1,0,0,0,91,332,1,0,0,0,93,338,1,0,0,0,95,347,1,0,0,
		0,97,354,1,0,0,0,99,358,1,0,0,0,101,365,1,0,0,0,103,380,1,0,0,0,105,389,
		1,0,0,0,107,396,1,0,0,0,109,400,1,0,0,0,111,405,1,0,0,0,113,409,1,0,0,
		0,115,416,1,0,0,0,117,422,1,0,0,0,119,430,1,0,0,0,121,435,1,0,0,0,123,
		441,1,0,0,0,125,449,1,0,0,0,127,456,1,0,0,0,129,460,1,0,0,0,131,464,1,
		0,0,0,133,475,1,0,0,0,135,490,1,0,0,0,137,496,1,0,0,0,139,501,1,0,0,0,
		141,503,1,0,0,0,143,508,1,0,0,0,145,514,1,0,0,0,147,518,1,0,0,0,149,523,
		1,0,0,0,151,525,1,0,0,0,153,530,1,0,0,0,155,536,1,0,0,0,157,158,5,36,0,
		0,158,159,3,125,61,0,159,4,1,0,0,0,160,162,3,53,25,0,161,160,1,0,0,0,161,
		162,1,0,0,0,162,164,1,0,0,0,163,165,7,0,0,0,164,163,1,0,0,0,165,166,1,
		0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,6,1,0,0,0,168,169,5,116,0,0,
		169,170,5,114,0,0,170,171,5,117,0,0,171,178,5,101,0,0,172,173,5,102,0,
		0,173,174,5,97,0,0,174,175,5,108,0,0,175,176,5,115,0,0,176,178,5,101,0,
		0,177,168,1,0,0,0,177,172,1,0,0,0,178,8,1,0,0,0,179,180,5,105,0,0,180,
		181,5,102,0,0,181,10,1,0,0,0,182,183,5,101,0,0,183,184,5,108,0,0,184,185,
		5,115,0,0,185,186,5,101,0,0,186,12,1,0,0,0,187,188,5,119,0,0,188,189,5,
		104,0,0,189,190,5,105,0,0,190,191,5,108,0,0,191,192,5,101,0,0,192,14,1,
		0,0,0,193,194,5,108,0,0,194,195,5,111,0,0,195,196,5,111,0,0,196,197,5,
		112,0,0,197,16,1,0,0,0,198,199,5,102,0,0,199,200,5,114,0,0,200,201,5,111,
		0,0,201,202,5,109,0,0,202,18,1,0,0,0,203,204,5,116,0,0,204,205,5,111,0,
		0,205,20,1,0,0,0,206,207,5,112,0,0,207,208,5,97,0,0,208,209,5,114,0,0,
		209,210,5,97,0,0,210,211,5,108,0,0,211,212,5,108,0,0,212,213,5,101,0,0,
		213,214,5,108,0,0,214,22,1,0,0,0,215,216,5,101,0,0,216,217,5,97,0,0,217,
		218,5,99,0,0,218,219,5,104,0,0,219,24,1,0,0,0,220,221,5,105,0,0,221,222,
		5,110,0,0,222,26,1,0,0,0,223,224,5,97,0,0,224,225,5,115,0,0,225,226,5,
		115,0,0,226,227,5,101,0,0,227,228,5,114,0,0,228,229,5,116,0,0,229,28,1,
		0,0,0,230,231,5,58,0,0,231,30,1,0,0,0,232,233,5,59,0,0,233,32,1,0,0,0,
		234,235,5,61,0,0,235,34,1,0,0,0,236,237,5,33,0,0,237,238,5,61,0,0,238,
		36,1,0,0,0,239,240,5,97,0,0,240,241,5,110,0,0,241,242,5,100,0,0,242,38,
		1,0,0,0,243,244,5,111,0,0,244,245,5,114,0,0,245,40,1,0,0,0,246,247,5,110,
		0,0,247,248,5,111,0,0,248,249,5,116,0,0,249,42,1,0,0,0,250,251,5,60,0,
		0,251,252,5,61,0,0,252,44,1,0,0,0,253,254,5,62,0,0,254,255,5,61,0,0,255,
		46,1,0,0,0,256,257,5,60,0,0,257,48,1,0,0,0,258,259,5,62,0,0,259,50,1,0,
		0,0,260,261,5,43,0,0,261,52,1,0,0,0,262,263,5,45,0,0,263,54,1,0,0,0,264,
		265,5,42,0,0,265,56,1,0,0,0,266,267,5,47,0,0,267,58,1,0,0,0,268,269,5,
		40,0,0,269,60,1,0,0,0,270,271,5,41,0,0,271,62,1,0,0,0,272,273,5,123,0,
		0,273,274,5,123,0,0,274,275,1,0,0,0,275,276,6,30,0,0,276,64,1,0,0,0,277,
		278,5,125,0,0,278,279,5,125,0,0,279,280,1,0,0,0,280,281,6,31,1,0,281,66,
		1,0,0,0,282,283,5,123,0,0,283,68,1,0,0,0,284,285,5,125,0,0,285,70,1,0,
		0,0,286,287,5,91,0,0,287,72,1,0,0,0,288,289,5,93,0,0,289,74,1,0,0,0,290,
		291,5,44,0,0,291,76,1,0,0,0,292,293,5,104,0,0,293,294,5,111,0,0,294,295,
		5,115,0,0,295,296,5,116,0,0,296,78,1,0,0,0,297,298,5,112,0,0,298,299,5,
		97,0,0,299,300,5,116,0,0,300,301,5,104,0,0,301,80,1,0,0,0,302,303,5,113,
		0,0,303,304,5,117,0,0,304,305,5,101,0,0,305,306,5,114,0,0,306,307,5,121,
		0,0,307,82,1,0,0,0,308,309,5,104,0,0,309,310,5,101,0,0,310,311,5,97,0,
		0,311,312,5,100,0,0,312,313,5,101,0,0,313,314,5,114,0,0,314,315,5,115,
		0,0,315,84,1,0,0,0,316,317,5,98,0,0,317,318,5,111,0,0,318,319,5,100,0,
		0,319,320,5,121,0,0,320,86,1,0,0,0,321,322,5,100,0,0,322,323,5,101,0,0,
		323,324,5,102,0,0,324,88,1,0,0,0,325,326,5,114,0,0,326,327,5,101,0,0,327,
		328,5,116,0,0,328,329,5,117,0,0,329,330,5,114,0,0,330,331,5,110,0,0,331,
		90,1,0,0,0,332,333,5,98,0,0,333,334,5,114,0,0,334,335,5,101,0,0,335,336,
		5,97,0,0,336,337,5,107,0,0,337,92,1,0,0,0,338,339,5,99,0,0,339,340,5,111,
		0,0,340,341,5,110,0,0,341,342,5,116,0,0,342,343,5,105,0,0,343,344,5,110,
		0,0,344,345,5,117,0,0,345,346,5,101,0,0,346,94,1,0,0,0,347,348,5,105,0,
		0,348,349,5,109,0,0,349,350,5,112,0,0,350,351,5,111,0,0,351,352,5,114,
		0,0,352,353,5,116,0,0,353,96,1,0,0,0,354,355,5,111,0,0,355,356,5,117,0,
		0,356,357,5,116,0,0,357,98,1,0,0,0,358,359,5,115,0,0,359,360,5,116,0,0,
		360,361,5,114,0,0,361,362,5,105,0,0,362,363,5,110,0,0,363,364,5,103,0,
		0,364,100,1,0,0,0,365,366,5,102,0,0,366,367,5,111,0,0,367,368,5,114,0,
		0,368,369,5,109,0,0,369,370,5,117,0,0,370,371,5,114,0,0,371,372,5,108,
		0,0,372,373,5,101,0,0,373,374,5,110,0,0,374,375,5,99,0,0,375,376,5,111,
		0,0,376,377,5,100,0,0,377,378,5,101,0,0,378,379,5,100,0,0,379,102,1,0,
		0,0,380,381,5,102,0,0,381,382,5,111,0,0,382,383,5,114,0,0,383,384,5,109,
		0,0,384,385,5,100,0,0,385,386,5,97,0,0,386,387,5,116,0,0,387,388,5,97,
		0,0,388,104,1,0,0,0,389,390,5,115,0,0,390,391,5,116,0,0,391,392,5,114,
		0,0,392,393,5,101,0,0,393,394,5,97,0,0,394,395,5,109,0,0,395,106,1,0,0,
		0,396,397,5,71,0,0,397,398,5,69,0,0,398,399,5,84,0,0,399,108,1,0,0,0,400,
		401,5,80,0,0,401,402,5,79,0,0,402,403,5,83,0,0,403,404,5,84,0,0,404,110,
		1,0,0,0,405,406,5,80,0,0,406,407,5,85,0,0,407,408,5,84,0,0,408,112,1,0,
		0,0,409,410,5,68,0,0,410,411,5,69,0,0,411,412,5,76,0,0,412,413,5,69,0,
		0,413,414,5,84,0,0,414,415,5,69,0,0,415,114,1,0,0,0,416,417,5,80,0,0,417,
		418,5,65,0,0,418,419,5,84,0,0,419,420,5,67,0,0,420,421,5,72,0,0,421,116,
		1,0,0,0,422,423,5,79,0,0,423,424,5,80,0,0,424,425,5,84,0,0,425,426,5,73,
		0,0,426,427,5,79,0,0,427,428,5,78,0,0,428,429,5,83,0,0,429,118,1,0,0,0,
		430,431,5,72,0,0,431,432,5,69,0,0,432,433,5,65,0,0,433,434,5,68,0,0,434,
		120,1,0,0,0,435,436,5,84,0,0,436,437,5,82,0,0,437,438,5,65,0,0,438,439,
		5,67,0,0,439,440,5,69,0,0,440,122,1,0,0,0,441,442,5,67,0,0,442,443,5,79,
		0,0,443,444,5,78,0,0,444,445,5,78,0,0,445,446,5,69,0,0,446,447,5,67,0,
		0,447,448,5,84,0,0,448,124,1,0,0,0,449,453,7,1,0,0,450,452,7,2,0,0,451,
		450,1,0,0,0,452,455,1,0,0,0,453,451,1,0,0,0,453,454,1,0,0,0,454,126,1,
		0,0,0,455,453,1,0,0,0,456,457,5,34,0,0,457,458,1,0,0,0,458,459,6,62,2,
		0,459,128,1,0,0,0,460,461,5,39,0,0,461,462,1,0,0,0,462,463,6,63,3,0,463,
		130,1,0,0,0,464,465,5,47,0,0,465,466,5,47,0,0,466,470,1,0,0,0,467,469,
		8,3,0,0,468,467,1,0,0,0,469,472,1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,
		0,471,473,1,0,0,0,472,470,1,0,0,0,473,474,6,64,4,0,474,132,1,0,0,0,475,
		476,5,47,0,0,476,477,5,42,0,0,477,481,1,0,0,0,478,480,9,0,0,0,479,478,
		1,0,0,0,480,483,1,0,0,0,481,482,1,0,0,0,481,479,1,0,0,0,482,484,1,0,0,
		0,483,481,1,0,0,0,484,485,5,42,0,0,485,486,5,47,0,0,486,487,1,0,0,0,487,
		488,6,65,5,0,488,134,1,0,0,0,489,491,7,4,0,0,490,489,1,0,0,0,491,492,1,
		0,0,0,492,490,1,0,0,0,492,493,1,0,0,0,493,494,1,0,0,0,494,495,6,66,5,0,
		495,136,1,0,0,0,496,497,5,123,0,0,497,498,5,123,0,0,498,499,1,0,0,0,499,
		500,6,67,0,0,500,138,1,0,0,0,501,502,5,123,0,0,502,140,1,0,0,0,503,504,
		5,92,0,0,504,505,5,123,0,0,505,506,1,0,0,0,506,507,9,0,0,0,507,142,1,0,
		0,0,508,509,5,34,0,0,509,510,1,0,0,0,510,511,6,70,6,0,511,512,6,70,1,0,
		512,144,1,0,0,0,513,515,8,5,0,0,514,513,1,0,0,0,515,516,1,0,0,0,516,514,
		1,0,0,0,516,517,1,0,0,0,517,146,1,0,0,0,518,519,5,123,0,0,519,520,5,123,
		0,0,520,521,1,0,0,0,521,522,6,72,0,0,522,148,1,0,0,0,523,524,5,123,0,0,
		524,150,1,0,0,0,525,526,5,92,0,0,526,527,5,123,0,0,527,528,1,0,0,0,528,
		529,9,0,0,0,529,152,1,0,0,0,530,531,5,39,0,0,531,532,1,0,0,0,532,533,6,
		75,7,0,533,534,6,75,1,0,534,154,1,0,0,0,535,537,8,6,0,0,536,535,1,0,0,
		0,537,538,1,0,0,0,538,536,1,0,0,0,538,539,1,0,0,0,539,156,1,0,0,0,12,0,
		1,2,161,166,177,453,470,481,492,516,538,8,5,0,0,4,0,0,5,1,0,5,2,0,0,1,
		0,6,0,0,7,63,0,7,64,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
